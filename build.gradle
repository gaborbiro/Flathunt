import com.anatawa12.compileTimeConstant.CreateConstantsTask
import dev.gaborbiro.investments.Dependencies

plugins {
    id("java")
    id("org.jetbrains.kotlin.jvm") version '1.9.0'
    id("com.anatawa12.compile-time-constant") version "1.0.5"
}

group 'app.gaborbiro'
version '1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation(project(":rightmove"))
    implementation(project(":zoopla"))
    implementation(project(":spareroom"))
    implementation(project(":idealista"))
    implementation(project(":service"))
    implementation(project(":service:domain"))
    implementation(project(":usecase"))
    implementation(project(":data"))
    implementation(project(":data:domain"))
    implementation(project(":google"))
    implementation(project(":base"))

    implementation(Dependencies.Google.gson)
    implementation(Dependencies.Jcabi.mainfests)
    implementation(Dependencies.slf4j.api)
    implementation(Dependencies.slf4j.jdk14)
    implementation(Dependencies.OkHttp.okhttp)
    implementation(Dependencies.Selenium.java)
}


def createCompileTimeConstant = tasks.withType(CreateConstantsTask) {
    constantsClass = "app.gaborbiro.flathunt.compileTimeConstant.Constants"
    if (project.hasProperty("service")) {
        values(Map.of("service", project.property("service") as String))
    } else {
        values(Map.of("service", ""))
    }
}

task allJars {
    dependsOn('spareroomExpJar', 'rightmoveExpJar', 'zooplaExpJar', 'idealistaExpJar')
}

tasks.register('spareroomExpJar', CustomJar, /* service = */ 'spareroom-exp', project)
tasks.register('rightmoveExpJar', CustomJar, /* service = */ 'rightmove-exp', project)
tasks.register('zooplaExpJar', CustomJar, /* service = */ 'zoopla-exp', project)
tasks.register('idealistaExpJar', CustomJar, /* service = */ 'idealista-exp', project)

class CustomJar extends org.gradle.jvm.tasks.Jar {

    @javax.inject.Inject
    CustomJar(String service, Project project) {
        manifest {
            attributes(
                    "Main-Class": "app.gaborbiro.flathunt.FlatHuntKt",
                    "jar-build-timestamp": new Date().toString(),
                    "service": service,
            )
        }
        project.properties["service"] = "idealista-exp"
        archiveFileName.set("FlatHunt-${service}.jar")

        from {} with project.jar

        destinationDirectory = project.file(project.rootDir)

        duplicatesStrategy = DuplicatesStrategy.WARN
    }
}

jar {
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}