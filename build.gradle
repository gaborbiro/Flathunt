import com.anatawa12.compileTimeConstant.CreateConstantsTask
import dev.gaborbiro.investments.Dependencies

plugins {
    id("java")
    id("org.jetbrains.kotlin.jvm") version '1.9.0'
    id("com.anatawa12.compile-time-constant") version "1.0.5"
    id("com.google.devtools.ksp") version "1.9.0-1.0.11"
}

apply from: "$project.rootDir/service.gradle"

// KSP - To use generated sources
sourceSets.main {
    java.srcDirs("build/generated/ksp/main/kotlin")
}

group 'app.gaborbiro'
version '1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation(project(":service"))
    implementation(project(":service:domain"))
    implementation(project(":usecase"))
    implementation(project(":data"))
    implementation(project(":data:domain"))
    implementation(project(":google"))
    implementation(project(":base"))

    implementation(Dependencies.Google.gson)
    implementation(Dependencies.Jcabi.mainfests)
    implementation(Dependencies.slf4j.api)
    implementation(Dependencies.slf4j.jdk14)
    implementation(Dependencies.OkHttp.okhttp)
    implementation(Dependencies.Selenium.java)

    implementation(Dependencies.Koin.core)
    implementation(Dependencies.Koin.annotations)
    ksp(Dependencies.Koin.ksp)
}

def createCompileTimeConstant = tasks.withType(CreateConstantsTask) {
    constantsClass = "app.gaborbiro.flathunt.compileTimeConstant.Constants"
    values(
            SERVICE_CONSTANTS.collectEntries { [it, it] }
    )
}

SERVICE_CONFIGS.forEach {
    tasks.register(it, RunnableJar, it, project)
}

task allJars {
    dependsOn(SERVICE_CONFIGS)
}

class RunnableJar extends org.gradle.jvm.tasks.Jar {

    @javax.inject.Inject
    RunnableJar(String serviceConfig, Project project) {
        manifest {
            attributes(
                    "Main-Class": "app.gaborbiro.flathunt.FlatHuntKt",
                    "jar-build-timestamp": new Date().toString(),
                    "serviceConfig": serviceConfig,
            )
        }
        project.properties["serviceConfig"] = "idealista-exp"
        archiveFileName.set("FlatHunt-${serviceConfig}.jar")

        from {} with project.jar

        destinationDirectory = project.file(project.rootDir)

        duplicatesStrategy = DuplicatesStrategy.WARN
    }
}

jar {
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}