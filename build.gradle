plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.9.0'
}

group 'app.gaborbiro'
version '1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation project(":rightmove")
    implementation project(":zoopla")
    implementation project(":spareroom")
    implementation project(":idealista")
    implementation project(":service")
    implementation project(":usecase")
    implementation project(":data")
    implementation project(":google")
    implementation project(":base")

    implementation 'com.google.code.gson:gson:2.8.9'

    implementation 'com.j256.ormlite:ormlite-core:5.6'
    implementation 'com.j256.ormlite:ormlite-jdbc:5.6'

    implementation 'com.jcabi:jcabi-manifests:1.1'

    implementation 'javax.inject:javax.inject:1'
    implementation 'org.slf4j:slf4j-api:1.7.+'
    implementation 'org.slf4j:slf4j-jdk14:1.7.+'

    implementation 'com.squareup.okhttp3:okhttp:4.11.0'

    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    implementation("org.seleniumhq.selenium:selenium-java:4.10.0")
}

task allJars {
    dependsOn('spareroomExpJar', 'rightmoveExpJar', 'zooplaExpJar', 'idealistaExpJar')
}

tasks.register('spareroomExpJar', CustomJar, /* service = */ 'spareroom-exp', project)
tasks.register('rightmoveExpJar', CustomJar, /* service = */  'rightmove-exp', project)
tasks.register('zooplaExpJar', CustomJar, /* service = */  'zoopla-exp', project)
tasks.register('idealistaExpJar', CustomJar, /* service = */  'idealista-exp', project)
//tasks.register('zooplaTwoJar', CustomJar, 'zoopla-two', project)

class CustomJar extends org.gradle.jvm.tasks.Jar {

    @javax.inject.Inject
    CustomJar(String service, Project project) {
        manifest {
            attributes(
                    "Main-Class": "app.gaborbiro.flathunt.FlatHuntKt",
                    "jar-build-timestamp": new Date().toString(),
                    "service": service,
            )
        }
        archiveFileName.set("FlatHunt-${service}.jar")

        from {} with project.jar

        destinationDirectory = project.file(project.rootDir)

        duplicatesStrategy = DuplicatesStrategy.WARN
    }
}

jar {
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}